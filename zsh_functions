#!/usr/bin/env bash

up(){
  local AMOUNT=${1:-1}
  for i in {1..$AMOUNT}
  do
    cd ..
  done
}

kp() {
  PID=$(echo $(lsof -n -i4TCP:$1) | awk 'NR==1{print $11}')
  kill -9 $PID
}

wu(){
  lsof -i tcp:$1
}

cln(){
  REPO=$1
  DESTINATION=${2:=$(basename "$1")}

  git clone $REPO $DESTINATION
  cd "$(basename "$REPO" .git)"
  v
}

mcd () {
  mkdir -p $1
  cd $1
}

ctp(){
  if [ -z "$1" ]
    then
      echo "Project name not provided"
      return 1
  fi

  mkdir $1
  cd $1
  git init

  echo "node_modules\n.DS_Store\n.env*\ndist" > .gitignore
  touch .env

  npm init --yes
  echo 'save-exact=true' > .npmrc

  NODE_VERSION=$(node -v | sed 's/^v\([^\.]*\).\([^\.]*\)\..*$/\1.\2/')
  npm i -D rimraf typescript ts-node eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin prettier @commitlint/cli @commitlint/config-conventional husky @types/node@$NODE_VERSION @total-typescript/ts-reset cross-os jest @types/jest ts-jest
  npm i dotenv zod

  echo '{ "parser": "@typescript-eslint/parser", "parserOptions": { "project":"./tsconfig.json" }, "extends": [ "plugin:@typescript-eslint/strict-type-checked" ], "rules": { "consistent-return": 1, "eqeqeq": 1, "no-param-reassign": 1, "@typescript-eslint/no-floating-promises": 2, "@typescript-eslint/explicit-function-return-type": 2, "@typescript-eslint/explicit-module-boundary-types": 2} }' > .eslintrc.json
  echo '{ "printWidth": 120, "tabWidth": 2, "useTabs": false, "semi": true, "singleQuote": true, "trailingComma": "none", "arrowParens": "avoid" }' > .prettierrc.json
  echo '{ "extends": ["@commitlint/config-conventional"] }' > .commitlintrc.json

  cat << _EOF_ >> jest.config.json
{
  "testEnvironment": "node",
  "roots": ["<rootDir>/dist/test"],
  "setupFiles": ["dotenv/config"]
}

_EOF_
  cat << _EOF_ >> ts-jest.config.json
{
  "preset": "ts-jest",
  "testEnvironment": "node",
  "roots": ["<rootDir>/test"],
  "setupFiles": ["dotenv/config"]
}
_EOF_


  mkdir test
  touch test/index.test.ts
  cat << _EOF_ >> test/index.test.ts
describe('index', () => {
  it('should pass', () => {
    expect(true).toBe(true);
  });
});
_EOF_

  npx tsc --init --target ES2022 --outDir './dist' 
  # we can't pipe from one file to itself, so we use that chance to build the tsconfig.test.json
  cat tsconfig.json | perl -pe 's/(\/\*.*\*\/)//;s/\/\/.*$//' | jq '.include = ["src","test"]' > tsconfig.test.json
  cp tsconfig.test.json tsconfig.json
  echo '{ "extends": "./tsconfig.json" }' > tsconfig.test.json

  mkdir src
  touch src/env.ts
  touch src/index.ts
  cat << _EOF_ >> src/env.ts
import { z } from 'zod';

const envSchema = z.object({
  NODE_ENV: z.enum(['development', 'production', 'test']).default('production')
});

export const env = envSchema.parse(process.env);
_EOF_

  cat << _EOF_ >> src/index.ts
import { env } from './env'; 
import { setTimeout as wait } from 'timers/promises';

async function main(): Promise<void> {
  await wait(100);

  console.log('Hello, World!', { env });
};

main()
  .then(() => {
    console.log('Done!')
  })
  .catch((error: unknown) => {
    console.error('Error:', error);
  });
_EOF_

  echo "import '@total-typescript/ts-reset';" > reset.d.ts

  npm pkg set version="0.1.0"
  npm pkg set main="dist/src/index.js"
  npm pkg set scripts.build="rimraf ./dist && tsc -p tsconfig.json"
  npm pkg set scripts.build:test:js="rimraf ./dist && tsc -p tsconfig.test.json"
  npm pkg set scripts.test:js="npm run build:test:js && jest --config jest.config.json"
  npm pkg set scripts.test:ts="jest --config ts-jest.config.json"
  npm pkg set scripts.test="npm run test:ts"
  npm pkg set scripts.start="node -r dotenv/config ./dist/src/index.js"
  npm pkg set scripts.start:dev="ts-node -r dotenv/config ./src/index.ts"
  npm pkg set scripts.pretty="cross-os pretty"
  npm pkg set scripts.pretty:check="cross-os pretty:check"
  npm pkg set scripts.lint="cross-os lint"
  npm pkg set cross-os.lint.darwin="eslint 'src/**/*.ts'"
  npm pkg set cross-os.lint.win32="eslint src/**/*.ts"
  npm pkg set cross-os.pretty:check.darwin="prettier --check 'src/**/*.ts'"
  npm pkg set cross-os.pretty:check.win32="prettier --check src/**/*.ts"
  npm pkg set cross-os.pretty.darwin="prettier --write 'src/**/*.ts'"
  npm pkg set cross-os.pretty.win32="prettier --write src/**/*.ts"

  npx husky init

  echo "npm run pretty:check && npm run lint" > .husky/pre-commit
  echo 'npx --no -- commitlint --edit $1'     > .husky/commit-msg
  echo ""                                     > .husky/pre-push  

  cat << _EOF_ >> .husky/pre-push
STATUS=\$(git status --porcelain | wc -l | xargs)
FILES=\$(git status --porcelain | sed -n "s;^.. \(.*\)\$;\\\\\t\\\\\t\1\\\\\n;p")

RED='\033[0;31m'
GREEN='\033[0;32m'
NO_COLOR='\033[0m'

if [ \$STATUS -ne 0 ]; then
  echo \$RED'✖ Make sure all changes are staged and committed before pushing'\$NO_COLOR
  echo \$RED'\tDetected changes in:'\$NO_COLOR
  echo \$RED\$FILES\$NO_COLOR
  exit 1
fi

echo \$GREEN'✓ No changes left to commit'\$NO_COLOR

_EOF_

  npx prettier --write './**/*.{json,ts}'

  git add --all
  git commit -am "chore: initial commit"

  npm run start:dev
  npm run test:ts

  npm run build
  npm run start
  npm run test:js
}

md2pdf(){
  npx --yes markdown-pdf $1
}

dsf(){
  diff -u $1 $2 | diff-so-fancy
}

fni(){
  NODE_VERSION=$1
  echo "Getting global packages"
  GLOBAL_PACKAGES=$(npm ls -g --json | jq '.dependencies | keys | .[]' | xargs)

  fnm install $NODE_VERSION
  fnm use $NODE_VERSION

  echo "Reinstalling global packages"
  echo $GLOBAL_PACKAGES | xargs npm i -g
}

_npm_run_completion() {
  if [[ ! -f package.json ]]; then
    return 0
  fi

  if ! command -v jq &> /dev/null; then
    return 0
  fi

  if ! jq -e '.scripts' package.json &> /dev/null; then
    return 0
  fi

  local -a script_names
  script_names=($(jq -r '.scripts | keys[]' package.json))

  _describe 'script' script_names
}

compdef _npm_run_completion "npm run" "yarn" "yarn run" 
