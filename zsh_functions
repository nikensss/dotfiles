up(){
  local AMOUNT=$1
  for i in {1..$AMOUNT}
  do
    cd ..
  done
}

kp() {
  PID=$(echo $(lsof -n -i4TCP:$1) | awk 'NR==1{print $11}')
  kill -9 $PID
}

wu(){
  lsof -i tcp:$1
}

cln(){
  git clone $1
  cd "$(basename "$1" .git)"
  v
}

mcd () {
  mkdir -p $1
  cd $1
}

ctp(){
  if [ -z "$1" ]
    then
      echo "Project name not provided"
      return 1
  fi

  mcd $1
  git init

  echo "node_modules\n.DS_Store" > .gitignore

  npm init --yes
  npm i -D typescript ts-node eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin prettier eslint-config-prettier eslint-plugin-prettier @commitlint/cli @commitlint/config-conventional husky

  echo '{ "parser": "@typescript-eslint/parser", "parserOptions": { "project":"./tsconfig.json" }, "extends": [ "plugin:@typescript-eslint/recommended","plugin:prettier/recommended","prettier" ], "rules": {"@typescript-eslint/no-floating-promises": ["error"]} }' > .eslintrc.json
  echo '{ "printWidth": 100, "tabWidth": 2, "useTabs": false, "semi": true, "singleQuote": true, "trailingComma": "none", "arrowParens": "avoid" }' > .prettierrc.json
  echo '{ "extends": ["@commitlint/config-conventional"] }' > .commitlintrc.json
  echo 'save-exact=true' > .npmrc

  tsc --init
  mkdir src
  touch src/index.ts
  echo "const main = async () => {console.log('hello, world!');};\n\nmain().then(()=>console.log('Done!')).catch(console.error);" > src/index.ts

  npm set-script start "ts-node src/index.ts"
  npm set-script pretty "prettier --write 'src/**/*.ts'"
  npm set-script pretty:check "prettier --check 'src/**/*.ts'"
  npm set-script lint "eslint 'src/**/*.ts'"
  npm set-script prepare "husky install"

  npm run prepare

  npx --yes husky add .husky/pre-commit "npm run pretty:check && npm run lint"
  npx --yes husky add .husky/commit-msg 'npx --no -- commitlint --edit $1'
  npx --yes husky add .husky/pre-push ""
  echo "STATUS=\$(git status --porcelain | wc -l | xargs)" >> .husky/pre-push
  echo "FILES=\$(git status --porcelain | sed -n \"s;^.. \\\(.*\\\)\$;\\\\\\\\\\\t\\\\\\\\\\\t\\\1\\\\\\\\\\\n;p\")" >> .husky/pre-push
  echo "" >> .husky/pre-push
  echo "RED='\\\033[0;31m'" >> .husky/pre-push
  echo "GREEN='\\\033[0;32m'" >> .husky/pre-push
  echo "NO_COLOR='\\\033[0m'" >> .husky/pre-push
  echo "" >> .husky/pre-push
  echo "if [ \$STATUS -ne 0 ]; then" >> .husky/pre-push
  echo "  echo \$RED'✖ Make sure all changes are staged and committed before pushing'\$NO_COLOR" >> .husky/pre-push
  echo "  echo \$RED'\\\tDetected changes in:'\$NO_COLOR" >> .husky/pre-push
  echo "  echo \$RED\$FILES\$NO_COLOR" >> .husky/pre-push
  echo "  exit 1" >> .husky/pre-push
  echo "fi" >> .husky/pre-push
  echo "" >> .husky/pre-push
  echo "echo \$GREEN'✓ No changes left to commit'\$NO_COLOR" >> .husky/pre-push
  echo "" >> .husky/pre-push

  prettier --write './**/*{json,ts}'
  git add --all

  npm run start
}

md2pdf(){
  npx --yes markdown-pdf $1
}

dsf(){
  diff -u $1 $2 | diff-so-fancy
}
